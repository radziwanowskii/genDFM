// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// singular_boot_for_irf
arma::mat singular_boot_for_irf(const arma::mat& Y, const arma::mat& VAR, const arma::mat& residuals);
RcppExport SEXP _genDFM_singular_boot_for_irf(SEXP YSEXP, SEXP VARSEXP, SEXP residualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type VAR(VARSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type residuals(residualsSEXP);
    rcpp_result_gen = Rcpp::wrap(singular_boot_for_irf(Y, VAR, residuals));
    return rcpp_result_gen;
END_RCPP
}
// compute_irf_with_constant_vertical
arma::mat compute_irf_with_constant_vertical(const arma::mat& VAR, int shock_var, int horizon, double shock_size);
RcppExport SEXP _genDFM_compute_irf_with_constant_vertical(SEXP VARSEXP, SEXP shock_varSEXP, SEXP horizonSEXP, SEXP shock_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type VAR(VARSEXP);
    Rcpp::traits::input_parameter< int >::type shock_var(shock_varSEXP);
    Rcpp::traits::input_parameter< int >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< double >::type shock_size(shock_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_irf_with_constant_vertical(VAR, shock_var, horizon, shock_size));
    return rcpp_result_gen;
END_RCPP
}
// compute_all_irf
arma::mat compute_all_irf(const arma::mat& VAR, const arma::mat& loadings, int shock_var, int horizon, double shock_size);
RcppExport SEXP _genDFM_compute_all_irf(SEXP VARSEXP, SEXP loadingsSEXP, SEXP shock_varSEXP, SEXP horizonSEXP, SEXP shock_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type VAR(VARSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type loadings(loadingsSEXP);
    Rcpp::traits::input_parameter< int >::type shock_var(shock_varSEXP);
    Rcpp::traits::input_parameter< int >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< double >::type shock_size(shock_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_all_irf(VAR, loadings, shock_var, horizon, shock_size));
    return rcpp_result_gen;
END_RCPP
}
// pca_cpp_arma
arma::mat pca_cpp_arma(const arma::mat& X, int n_components, bool center, bool scale);
RcppExport SEXP _genDFM_pca_cpp_arma(SEXP XSEXP, SEXP n_componentsSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n_components(n_componentsSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_cpp_arma(X, n_components, center, scale));
    return rcpp_result_gen;
END_RCPP
}
// multivariate_multiple_regression_arma
arma::mat multivariate_multiple_regression_arma(const arma::mat& Y, const arma::mat& X1, const arma::mat& X2);
RcppExport SEXP _genDFM_multivariate_multiple_regression_arma(SEXP YSEXP, SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(multivariate_multiple_regression_arma(Y, X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// favar_prep_arma
Rcpp::List favar_prep_arma(const arma::mat& data, int n_components, int n_lags, const arma::mat& data_slow, const arma::mat& data_direct);
RcppExport SEXP _genDFM_favar_prep_arma(SEXP dataSEXP, SEXP n_componentsSEXP, SEXP n_lagsSEXP, SEXP data_slowSEXP, SEXP data_directSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_components(n_componentsSEXP);
    Rcpp::traits::input_parameter< int >::type n_lags(n_lagsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_slow(data_slowSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_direct(data_directSEXP);
    rcpp_result_gen = Rcpp::wrap(favar_prep_arma(data, n_components, n_lags, data_slow, data_direct));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_irf_arma_for_fyff
arma::cube bootstrap_irf_arma_for_fyff(const arma::mat& boot_data, const arma::mat& VAR, const arma::mat& loadings, int shock_var, int horizon, int no_boot, int n_lags, double shock_size);
RcppExport SEXP _genDFM_bootstrap_irf_arma_for_fyff(SEXP boot_dataSEXP, SEXP VARSEXP, SEXP loadingsSEXP, SEXP shock_varSEXP, SEXP horizonSEXP, SEXP no_bootSEXP, SEXP n_lagsSEXP, SEXP shock_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type boot_data(boot_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type VAR(VARSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type loadings(loadingsSEXP);
    Rcpp::traits::input_parameter< int >::type shock_var(shock_varSEXP);
    Rcpp::traits::input_parameter< int >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< int >::type no_boot(no_bootSEXP);
    Rcpp::traits::input_parameter< int >::type n_lags(n_lagsSEXP);
    Rcpp::traits::input_parameter< double >::type shock_size(shock_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_irf_arma_for_fyff(boot_data, VAR, loadings, shock_var, horizon, no_boot, n_lags, shock_size));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_irf_arma_optimal
arma::cube bootstrap_irf_arma_optimal(const arma::mat& boot_data, const arma::mat& VAR, const arma::mat& loadings, int shock_var, int horizon, int no_boot, int n_lags, double shock_size, bool direct);
RcppExport SEXP _genDFM_bootstrap_irf_arma_optimal(SEXP boot_dataSEXP, SEXP VARSEXP, SEXP loadingsSEXP, SEXP shock_varSEXP, SEXP horizonSEXP, SEXP no_bootSEXP, SEXP n_lagsSEXP, SEXP shock_sizeSEXP, SEXP directSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type boot_data(boot_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type VAR(VARSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type loadings(loadingsSEXP);
    Rcpp::traits::input_parameter< int >::type shock_var(shock_varSEXP);
    Rcpp::traits::input_parameter< int >::type horizon(horizonSEXP);
    Rcpp::traits::input_parameter< int >::type no_boot(no_bootSEXP);
    Rcpp::traits::input_parameter< int >::type n_lags(n_lagsSEXP);
    Rcpp::traits::input_parameter< double >::type shock_size(shock_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_irf_arma_optimal(boot_data, VAR, loadings, shock_var, horizon, no_boot, n_lags, shock_size, direct));
    return rcpp_result_gen;
END_RCPP
}
// row_quantiles
arma::mat row_quantiles(const arma::mat& data, const arma::vec& probs);
RcppExport SEXP _genDFM_row_quantiles(SEXP dataSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(row_quantiles(data, probs));
    return rcpp_result_gen;
END_RCPP
}
// gdfm_forni_2000
Rcpp::List gdfm_forni_2000(const arma::mat& matrix, int M, int q);
RcppExport SEXP _genDFM_gdfm_forni_2000(SEXP matrixSEXP, SEXP MSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(gdfm_forni_2000(matrix, M, q));
    return rcpp_result_gen;
END_RCPP
}
// estimate_projection
arma::mat estimate_projection(const arma::mat& T_x0, const arma::mat& Z, const arma::mat& x_t);
RcppExport SEXP _genDFM_estimate_projection(SEXP T_x0SEXP, SEXP ZSEXP, SEXP x_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T_x0(T_x0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x_t(x_tSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_projection(T_x0, Z, x_t));
    return rcpp_result_gen;
END_RCPP
}
// estimate_projection_singular
arma::mat estimate_projection_singular(const arma::mat& T_x0, const arma::mat& T_xh, const arma::mat& Z, const arma::vec& x_T);
RcppExport SEXP _genDFM_estimate_projection_singular(SEXP T_x0SEXP, SEXP T_xhSEXP, SEXP ZSEXP, SEXP x_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T_x0(T_x0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T_xh(T_xhSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_T(x_TSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_projection_singular(T_x0, T_xh, Z, x_T));
    return rcpp_result_gen;
END_RCPP
}
// forecast_projection
arma::mat forecast_projection(const arma::mat& T_x0, const arma::mat& T_xh, const arma::mat& Z, const arma::vec& x_T);
RcppExport SEXP _genDFM_forecast_projection(SEXP T_x0SEXP, SEXP T_xhSEXP, SEXP ZSEXP, SEXP x_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T_x0(T_x0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T_xh(T_xhSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_T(x_TSEXP);
    rcpp_result_gen = Rcpp::wrap(forecast_projection(T_x0, T_xh, Z, x_T));
    return rcpp_result_gen;
END_RCPP
}
// restricted_gdfm
Rcpp::List restricted_gdfm(const arma::mat& matrix, int M, int q, int r);
RcppExport SEXP _genDFM_restricted_gdfm(SEXP matrixSEXP, SEXP MSEXP, SEXP qSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(restricted_gdfm(matrix, M, q, r));
    return rcpp_result_gen;
END_RCPP
}
// compute_sorted_eigenvalues
arma::vec compute_sorted_eigenvalues(const arma::mat& matrix, arma::vec& sequence);
RcppExport SEXP _genDFM_compute_sorted_eigenvalues(SEXP matrixSEXP, SEXP sequenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sequence(sequenceSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sorted_eigenvalues(matrix, sequence));
    return rcpp_result_gen;
END_RCPP
}
// Onatski_2009_test
double Onatski_2009_test(const arma::vec& sorted_eigenvalues, const arma::vec& CVs, int k0, int k1);
RcppExport SEXP _genDFM_Onatski_2009_test(SEXP sorted_eigenvaluesSEXP, SEXP CVsSEXP, SEXP k0SEXP, SEXP k1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type sorted_eigenvalues(sorted_eigenvaluesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CVs(CVsSEXP);
    Rcpp::traits::input_parameter< int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    rcpp_result_gen = Rcpp::wrap(Onatski_2009_test(sorted_eigenvalues, CVs, k0, k1));
    return rcpp_result_gen;
END_RCPP
}
// Onatski_2010_test
int Onatski_2010_test(const arma::mat& data, int rmax);
RcppExport SEXP _genDFM_Onatski_2010_test(SEXP dataSEXP, SEXP rmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type rmax(rmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(Onatski_2010_test(data, rmax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_genDFM_singular_boot_for_irf", (DL_FUNC) &_genDFM_singular_boot_for_irf, 3},
    {"_genDFM_compute_irf_with_constant_vertical", (DL_FUNC) &_genDFM_compute_irf_with_constant_vertical, 4},
    {"_genDFM_compute_all_irf", (DL_FUNC) &_genDFM_compute_all_irf, 5},
    {"_genDFM_pca_cpp_arma", (DL_FUNC) &_genDFM_pca_cpp_arma, 4},
    {"_genDFM_multivariate_multiple_regression_arma", (DL_FUNC) &_genDFM_multivariate_multiple_regression_arma, 3},
    {"_genDFM_favar_prep_arma", (DL_FUNC) &_genDFM_favar_prep_arma, 5},
    {"_genDFM_bootstrap_irf_arma_for_fyff", (DL_FUNC) &_genDFM_bootstrap_irf_arma_for_fyff, 8},
    {"_genDFM_bootstrap_irf_arma_optimal", (DL_FUNC) &_genDFM_bootstrap_irf_arma_optimal, 9},
    {"_genDFM_row_quantiles", (DL_FUNC) &_genDFM_row_quantiles, 2},
    {"_genDFM_gdfm_forni_2000", (DL_FUNC) &_genDFM_gdfm_forni_2000, 3},
    {"_genDFM_estimate_projection", (DL_FUNC) &_genDFM_estimate_projection, 3},
    {"_genDFM_estimate_projection_singular", (DL_FUNC) &_genDFM_estimate_projection_singular, 4},
    {"_genDFM_forecast_projection", (DL_FUNC) &_genDFM_forecast_projection, 4},
    {"_genDFM_restricted_gdfm", (DL_FUNC) &_genDFM_restricted_gdfm, 4},
    {"_genDFM_compute_sorted_eigenvalues", (DL_FUNC) &_genDFM_compute_sorted_eigenvalues, 2},
    {"_genDFM_Onatski_2009_test", (DL_FUNC) &_genDFM_Onatski_2009_test, 4},
    {"_genDFM_Onatski_2010_test", (DL_FUNC) &_genDFM_Onatski_2010_test, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_genDFM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
